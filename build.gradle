import org.gradle.internal.os.OperatingSystem

plugins {
    id 'org.jetbrains.kotlin.jvm' version '2.0.10'
    id 'org.graalvm.buildtools.native' version '0.10.3'
    id 'org.openjfx.javafxplugin' version '0.0.8'
}

group = 'trafficsim'
version = '1.0-SNAPSHOT'
project.ext.lwjglVersion = "3.3.4"

switch (OperatingSystem.current()) {
    case OperatingSystem.LINUX:
        project.ext.lwjglNatives = "natives-linux"
        def osArch = System.getProperty("os.arch")
        if (osArch.startsWith("arm") || osArch.startsWith("aarch64")) {
            project.ext.lwjglNatives += osArch.contains("64") || osArch.startsWith("armv8") ? "-arm64" : "-arm32"
        } else if (osArch.startsWith("ppc")) {
            project.ext.lwjglNatives += "-ppc64le"
        } else if (osArch.startsWith("riscv")) {
            project.ext.lwjglNatives += "-riscv64"
        }
        break
    case OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = "natives-macos-arm64"
        break
    case OperatingSystem.WINDOWS:
        project.ext.lwjglNatives = "natives-windows"
        break
}

javafx {
    version = "14"
    modules = [ 'javafx.controls', 'javafx.fxml']
}

allprojects {
    repositories {
        mavenCentral()
    }

    kotlin {
        jvmToolchain {
            languageVersion.set(JavaLanguageVersion.of(21))
        }
    }
}
dependencies {
    testImplementation 'org.jetbrains.kotlin:kotlin-test'

    implementation(project(":xodr_parser"))
    implementation(project(":javafx_simple_visual"))
    implementation(project(":simulator"))

    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")
    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-assimp"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-stb"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
}

graalvmNative {
    toolchainDetection.set(true)
    binaries {
        named("main") {
            imageName.set("trafficsim")
            mainClass.set("trafficsim.MainKt")
            buildArgs.add("--initialize-at-build-time")
        }
    }
    binaries.configureEach {
        resources.autodetect()
    }
}

test {
    useJUnitPlatform()
}

kotlin {
    jvmToolchain(21)
}